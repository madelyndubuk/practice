Madelyn Dubuk
CSCI 104
1/11/19
HW #1

Problem 1:
A) which of the following are acceptable behaviors in
solving homewokrs/projects?
	1. Looking up information relevant to the course online
	4. Asking the course staff for help
	8. Copying test cases from my classmates or Piazza when test cases are not graded

B) Which of the following are recommended ways of writing code?
	emacs
	Eclipse
	Sublime
	Microsoft Visual Studio

C) What is the late submission policy?
	4. Use the normal submission system provided you have grace-days available

D) After making a late submission by pushing your code to Github you would...
	1. Use the normal submission system on the course website
	4. Start the next assignment sooner

Problem 2:
A) Which of the following git user interfaces are accepted and supported in this course?
	3. Terminal

B) Provide the appropriate git command to perform the following operations:
	1. git add ./hw1q2b.cpp
	2. git log -3

C) If you stages three files to be committed and ran " git commit", git will ask for what you would like to call this commit (also called commit message). 

Problem 4:
After the code is run, the ouput will be:
 1  2  3  4
10  6  7  8
31 10 11 12  

Explanation:
 The program begins in main by initializing three int arrays (r1, r2, and r3).  An array of pointers is also initialized (mat) and its contents are filled with pointers to the first elements in each of the three previously mentioned int arrays.  The first call to func1 passes mat as an int**, 3, and 4.  Once inside the func1 function, the first if statement is executed because n must be > 0 and n is currently 3.  The program assigns the value returned by the recursive call to func1(mat, 2, 4) to the first element in the r3 array.  From there, we enter into a lower branch on the recursive tree and the first if statement is executed againm, since n must be > 0 and n now has a value of 2.  The first line below the if statements assigns the value of the recursive call to func1(mat, 1, 4) to the first element in the r2 array.  Again, we reach a lower branch in the recursive tree and the first if statement proves true since n now carries the value of 1.  The next line of code assigns the value of the recursive call to func1(mat, 0, 4) to the first element in the r1 array.  Once inside that recursive call, the first if statement becomes false since n holds the value of 0 which is no > 0.  So the else block is executed and the value of mat[0][0] is returned back up the recursive call tree.  The current value of mat[0][0] is the value of the first element in the r1 array which is 1.  The value 1 is then returned and assigned as the value of mat[0][0], which is already 1.  Then the second line of the first if statement executes and calls func(mat[0], 4).  Another branch of the recursive tree is made and the function func2 executes.  Within this function, the first if statement (x>0) holds true, so the values of each current element in the r1 array are added together (1+2+3+4) and their sum (10) is assigned to the variable temp, which is then returned by the function.  At this point, the value being returned (10) becomes the return value for func1.  The value 10 is then returned from func1, up the recursive tree, to be assigned to the value of the first element in r2 array.  The r2 array now contains the values [10,6,7,8].  Next, the program executes the second line within the if black which calls the function func2(mat[1],4).  Within the function func2, the first if statement is true because x must be > 0 and x's value is 4 again.  The for loop executes and adds all the elements of the r2 array together to get a total of 31.  The value of the variable temp is now 31 and temp is returned from the func2 function back to the func1 function.  From there, the func1 function returns that same value (31) back up the recursive tree so that 31 is assigned to the the value of the first element in the r3 array.  The next line calls func2 and passes mat[2] and 4 as the parameters, however calling this function changes nothing about any of the int arrays and the program returns back to main.  A double for loop is executed printing the contents of each array (r1, r2, and r3).  Each array is printed on a separate line with a width of 2 spaces in between each element.  The contents of each array are printed as follows:
  1  2  3  4
 10  6  7  8
 31 10 11 12 